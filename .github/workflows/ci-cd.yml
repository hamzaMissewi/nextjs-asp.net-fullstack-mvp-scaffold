name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: resumegen-api
  AZURE_WEBAPP_PACKAGE_PATH: './src/backend'
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./src/backend
    
    - name: Build
      run: dotnet build --no-restore
      working-directory: ./src/backend
    
    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
      working-directory: ./src/backend
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./src/backend/TestResults

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./src/frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./src/frontend
    
    - name: Run linting
      run: npm run lint
      working-directory: ./src/frontend
    
    - name: Run type checking
      run: npm run type-check
      working-directory: ./src/frontend
    
    - name: Run unit tests
      run: npm run test
      working-directory: ./src/frontend
    
    - name: Run E2E tests
      run: npm run test:e2e
      working-directory: ./src/frontend

  # Build and Push Docker Images
  build-and-push:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./src/backend
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/resumegen-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./src/frontend
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/resumegen-web:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Azure
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: resumegen-${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/resumegen-api:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: resumegen-api
        location: 'east us'
        environment-variables: |
          ASPNETCORE_ENVIRONMENT=Production
          ConnectionStrings__DefaultConnection=${{ secrets.CONNECTION_STRING }}
          JWT__SecretKey=${{ secrets.JWT_SECRET }}
          OpenAI__ApiKey=${{ secrets.OPENAI_API_KEY }}
    
    - name: Deploy frontend to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./src/frontend"
        output_location: "dist"
        api_location: ""
